#include <stdarg.h>
#include "rodos.h"

/**
 * micro printf (subset)
 *
 * Author: Unkown (long long time ago)
 * c++, %ll, %b %f: Extensions: Sergio Montenegro, 2011
 *
 */

namespace RODOS {

void Yprintf::vaprintf(const char *fmt) {
    unsigned char c;

    while ((c = *fmt++) != 0) {
        unsigned char is_signed = 0;
        unsigned char is_long = 0;
        unsigned char is_longlong = 0;
        unsigned char is_float = 0;
        unsigned short base;
        unsigned char *ptr;

        if (c != '%') {
            yputc(c);
            continue;
        }
        c = *fmt++;

        unsigned char width = 0;
        unsigned char fill = ' ';
        unsigned char decimalPos = 3;

        if (c == '0') {
            fill = c;
            c = *fmt++;
        }
        if (c >= '0' && c <= '9') {
            width = c - '0';
            c = *fmt++;
        }
        if (c == '.') {
            c = *fmt++; if(c == 0) return; // SM: bad format
            decimalPos = c - '0';
            c = *fmt++; if(c == 0) return; // SM: bad format
        }

        if (c == 'l') {
            is_long = 1;
            c = *fmt++;
        }
        if (c == 'l') {
            is_longlong = 1;
            c = *fmt++;
        }
        if(c == 0) return; //SM: Bad format eg "cnt =%" or "%3" etc

        switch (c) {
        case 'c':
            c = va_arg(ap, int);	// char promoted to int
        /* no break */

        default:
            yputc(c);
            continue;

        case 's':
            ptr = (unsigned char *) va_arg(ap, char *);
            while ((c = *ptr++)) {
                yputc(c);
            }
            continue;

        case 'o':
            base = 8;
            yputc('0');
            break;

	    case 'f':
           is_float = 1;
           is_signed = 1;
           base = 10;
           break;

	    case 'd':
            is_signed = 1;
            base = 10;
            break;

        case 'u':
            base = 10;
            break;

        case 'x':
            base = 16;
            break;

        case 'b':
            base = 2;
            break;
        }

        // Number output
        {
            unsigned long long u_val;
            long long s_val = 0;
            double    f_val = 0.0;

            {
                if (is_float) {
                    f_val = va_arg(ap, double);
                    s_val = (long long) f_val;
                } else if (is_longlong) {
                    s_val = va_arg(ap, long long);
                } else if (is_long) {
                    s_val = va_arg(ap, long);
                } else {
                    s_val = va_arg(ap, int);
                }

                if (is_signed) {
                    if (s_val < 0 || f_val < 0) {
                        s_val = -s_val;		// make it positiv
                        f_val = -f_val;
                        yputc('-');
                        if (width) {
                            --width;
                        }
                    }
                }

                if (is_longlong) {
                    u_val = (unsigned long long)s_val;
                } else if (is_long) {
                    u_val = (unsigned long long)(unsigned long)s_val;
                } else {
                    u_val = (unsigned long long)(unsigned int)s_val;
                }
            }

            {
                unsigned char scratch[26];

                ptr = scratch + sizeof(scratch);
                *--ptr = 0;
                do {
                    char ch = (char)((u_val % base) + '0');

                    if (ch > '9') {
                        ch += 'A' - '9' - 1;
                    }

                    *--ptr = ch;
                    u_val /= base;

                    if (width) {
                        --width;
                    }
                } while (u_val);

                // insert padding chars
                while (width--) {
                    *--ptr = fill;
                }

                // output result
                while ((c = *ptr++)) {
                    yputc(c);
                }
            }

           // floating point
           if (is_float) {
              yputc('.');
              while(decimalPos--) {
                 f_val -= s_val;   // rm intger part
                 s_val = f_val = f_val * 10;
                 yputc(s_val + '0');
              }
           }
        
        } // number outputs
    } // for all chars in format (fmt)
}

/*******************/
void xprintf(const char *fmt, ...) {
    if(printfMask == 0) return;
    Yprintf yprintf;
    va_start(yprintf.ap, fmt);
    yprintf.vaprintf(fmt);
}

void xsprintf(char* dest, const char *fmt, ...) {
    Ysprintf ysprintf(dest);
    va_start(ysprintf.ap, fmt);
    ysprintf.vaprintf(fmt);
}

} // namespace

