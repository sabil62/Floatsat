#**************************************************************************
#   Copyright (C) 2015-2016 by Microsemi Corporation                      *
#   soc_tech@microsemi.com                                                *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 2 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program; if not, write to the                         *
#   Free Software Foundation, Inc.,                                       *
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.           *
#**************************************************************************

#------------------------------------------------------------------------------
# Microsemi SmartFusion A2FXXX and SmartFusion2 M2SXXX Cortex-M3 SoC FPGAs
# http://www.microsemi.com/products/fpga-soc/soc-fpga/smartfusion
# http://www.microsemi.com/products/fpga-soc/soc-fpga/smartfusion2 
# 
# A single consolidated script is used for SmartFusion and SmartFusion2 as
# there is much commonality to how OpenOCD interacts with these two Cortex-M3
# based targets.
#
# "Parameters" - i.e. variables that can be set externally in order to 
# influence how the script operates. These parameters can be set in
# the SoftConsole debug launch configuration using the OpenOCD -c or
# --command options.
# 
# Variable name: DEVICE
# Optional/required: Required
# Allowed values: SmartFusion (A2FXXX) or SmartFusion2 (M2SXXX) device 
# designator. See device_family below for full list of values.
# Default value: None - must be explicitly specified externally.
# Description: SmartFusion (A2FXXX) or SmartFusion2 (M2SXXX) device designator
# Example: --command "set DEVICE M2S090"
#
# Variable name: DPK
# Optional/required: Optional 
# Allowed values: 64 hex digit string with or without 0x prefix
# Default value: None
# Description: Debug Pass Key (DPK) for unlocking access to SmartFusion2 
# Cortex-M3 debugging where this is locked in the Libero project using 
# a 256 bit key.
# Example: --command "set DPK 0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
#
# Variable name: JTAG_KHZ
# Optional/required: Optional 
# Allowed values: 1000, 2000, 3000, 4000, 5000 (FlashPro4/FlashPro5 only), 
# 6000, 10000 (FlashPro5 only)
# Default value: 6000 (set in interface/microsemi-flashpro.cfg)
# Description: JTAG TCK clock speed in kHz (e.g. 1000 = 1000kHz = 1MHz).
# Example: --command "set JTAG_KHZ 4000"
#
# Variable name: FPGA_TAP
# Optional/required: Optional
# Allowed values: Y or N
# Default value: Y (set in interface/microsemi-flashpro.cfg)
# Description: specifies whether debugging will be "indirect" via the FPGA TAP 
# (Y) or direct to the CPU's JTAG debug interface (N). Normally
# debugging is via FlashPro and the FPGA TAP which needs to be bypassed before
# the debugger can access the Cortex-M3 CoreSight/DAP directly. JTAG_SEL will 
# normally only be tied low if debugging is via the board's RVI connector using
# an RVI compatible JTAG probe (e.g. Olimex ARM-USB-TINY-H, Segger J-Link etc.) 
# or using FlashPro manually wired to the RVI connector or general I/Os for 
# direct access to the Cortex-M3 CoreSight/DAP with no FPGA TAP in between.
# Example: --command "set FPGA_TAP N"
#
# Variable name: FLASHPRO
# Optional/required: Optional
# Allowed values: Y or N
# Default value: Y (set in interface/microsemi-flashpro.cfg)
# Description: Specifies whether or not to use FlashPro for debugging. Setting
# it to "N" allows a non FlashPro JTAG probe to be used. E.g. an 
# Olimex ARM-USB-TINY-H or other RVI compatible probe connected to the RVI
# connector on the board. For this reason setting USE_FLASHPRO to "N" also
# has the side effect of overriding JTAG_SEL and setting it to "L".
# 
# Example: --command "set FLASHPRO N"
#          --file interface/ftdi/olimex-arm-usb-tiny-h.cfg
#
# Additional notes:
# 
# Only DEVICE is mandatory so in many cases the following will suffice:
# openocd -c "set DEVICE M2S090" -f board/microsemi-cortex-m3.cfg
#
# Multiple variables can be specified together:
# openocd -c "set DEVICE M2S090; set JTAG_KHZ 4000" -f board/microsemi-cortex-m3.cfg
#
# or separately:
# openocd -c "set DEVICE M2S090" -c "set JTAG_KHZ 4000" -f board/microsemi-cortex-m3.cfg
#
# Note that the OpenOCD -c and --command options are synonymous. Similarly the
# OpenOCD -f and --file options are synonymous.
# 
# An example of debugging SmartFusion A2F200 using an Olimex ARM-USB-TINY-H 
# JTAG prove connecting directly to the Cortex-M3 via the board's RVI connector
# and running at 4MHz:
#
# openocd -f interface/ftdi/olimex-arm-usb-tiny-h.cfg \
#         --command "set DEVICE A2F200; set FLASHPRO N; set JTAG_KHZ 4000" \
#         --file target/microsemi-cortex-m3.cfg
#------------------------------------------------------------------------------

# Device name to device family name lookup table
array set device_family {
	A2F060	SmartFusion
	A2F200	SmartFusion
	A2F500	SmartFusion
	M2S005	SmartFusion2
	M2S010	SmartFusion2
	M2S025	SmartFusion2
	M2S050	SmartFusion2
	M2S060	SmartFusion2
	M2S090	SmartFusion2
	M2S150	SmartFusion2
	A4P200	SmartFusion2
}

# Device name to device IDCODE(s) lookup table
array set device_idcodes {
	A2F060	0x05a111cf
	A2F200	"0x05a131cf 0x07a131cf"
	A2F500	"0x05b251cf 0x07b251cf"
	M2S005	0x0f8051cf
	M2S010	0x0f8031cf
	M2S025	0x0f8041cf
	M2S050	0x0f8021cf
	M2S060	0x0f8081cf
	M2S090	0x0f8071cf
	M2S150	0x0f8061cf
	A4P200	0x0f8001cf
}

# Device name to device eSRAM size lookup table
array set device_esram_size {
	A2F060	0x4000
	A2F200	0x10000
	A2F500	0x10000
	M2S005	0x10000
	M2S010	0x10000
	M2S025	0x10000
	M2S050	0x10000
	M2S060	0x10000
	M2S090	0x10000
	M2S150	0x10000
	A4P200	0x10000
}

# Device name to device eNVM size lookup table
array set device_envm_size {
	A2F060	0x20000
	A2F200	0x40000
	A2F500	0x80000
	M2S005	0x20000
	M2S010	0x40000
	M2S025	0x40000
	M2S050	0x40000
	M2S060	0x40000
	M2S090	0x80000
	M2S150	0x80000
	A4P200	0x20000
}

# Device family name to device FPGA TAP "bypass" command lookup table
# SmartFusion CTXSELECT = 0x94
# SmartFusion2 M3DEBUG = 0x0a
array set fpga_bypass_command {
	SmartFusion		0x94
	SmartFusion2	0x0a
}

# Device family name to device eNVM driver name lookup table
array set envm_driver {
	SmartFusion		microsemi-smartfusion-envm
	SmartFusion2	microsemi-smartfusion2-envm
}

# 
# Validate DEVICE variable
#

if {![exists DEVICE]} {
	error "Error: DEVICE not defined - must be set to the appropriate SmartFusion A2FXXX or SmartFusion2 M2SXXX device name"
} else {
	# Normalise - trim to 6 characters and convert to uppercase
	set DEVICE_UPPER [string range $DEVICE 0 5]
	set DEVICE_UPPER [string toupper $DEVICE_UPPER]
	
	# Validate DEVICE_UPPER
	if {![exists device_family($DEVICE_UPPER)]} {
		error [format "Error: unknown DEVICE \"%s\" specified" $DEVICE]
	}

	set DEVICE $DEVICE_UPPER
}

#
# Validate DPK (Debug Pass Key) used to unlock SmartFusion2 Cortex-M3 debug access
#

if {[exists DPK]} {
	# Strip leading "0x" or "0X" hex specifier if present
	if {[string toupper [string range $DPK 0 1]] eq "0X"} {
		set DPK_TEMP [string range $DPK 2 [string length $DPK]]
	} else {
		set DPK_TEMP $DPK
	}
	
	# Remainder must be a 64 hex digit (256 bit) string
	if {([string length [string trim $DPK_TEMP "0123456789ABCDEFabcdef"]] ne 0) || 
		([string length $DPK_TEMP] ne 64)} {
		error [format "Error: Debug Pass Key (DPK) \"%s\" is not a valid 64 hex digit (265 bit) key" $DPK]
	}
	
	set DPK $DPK_TEMP
}

#
# Describe TAP arrangement...
#

if {$FPGA_TAP eq "Y"} {
	# FPGA TAP present, occludes Cortex-M3 DAP TAP and must be bypassed first

	#
	# FPGA TAP
	#

	# Some devices may have more than one IDCODE (e.g. different revisions)
	foreach idcode $device_idcodes($DEVICE) {
		append expected_ids "-expected-id " $idcode " "
	}

	eval "jtag newtap $DEVICE tap -irlen 8 $expected_ids -ignore-version"
	jtag configure $DEVICE.tap -event tap-disable "disable_fpga_tap $DEVICE.tap $fpga_bypass_command($device_family($DEVICE))"
	jtag configure $DEVICE.tap -event setup "switch_from_fpga_tap_to_m3_dap $DEVICE.tap $DEVICE.dap"

	#
	# Cortex-M3 DAP - disabled/not visible by default until FPGA TAP bypassed
	#

	jtag newtap $DEVICE dap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version -disable
	jtag configure $DEVICE.dap -event tap-enable "enable_m3_dap"
	
	#
	# TAP management event handlers/procedures
	#

	# Switch from FPGA TAP to Cortex-M3 DAP (by disabling/bypassing the former)
	proc switch_from_fpga_tap_to_m3_dap {fpga_tap m3_dap} {
		jtag tapdisable $fpga_tap
		jtag tapenable $m3_dap

		# Read Cortex-M3 IDCODE as a sanity check
		irscan $m3_dap 0x0e
		set idcode [string tolower [drscan $m3_dap 32 0]]
		echo [format "Info : Cortex-M3 IDCODE = 0x%s" $idcode]
	}
	
	# Unlock Cortex-M3 debug access using DPK (Debug Pass Key) if needed
	proc unlock_debug_access {fpga_tap} {
		global DPK
		global DEVICE
		global device_family
		
		# echo "Start unlock_debug_access"
				
		# Is DPK unlocking needed - i.e. is target SmartFusion2 & was DPK specified?
		if {(![exists DPK]) || ($device_family($DEVICE) ne "SmartFusion2")} {
			# No - so return immediately
			return
		}
		
		# Split DPK into DPK_LO and DPK_HI
		set DPK_LO 0x[string range $DPK 32 63]
		set DPK_HI 0x[string range $DPK 0 31]			
		
		# Wait until System Controller is ready to accept commands
		set busy 1
		while {$busy} {
			irscan $fpga_tap 0x8f
			set result [drscan $fpga_tap 8 0x00] 
			set busy [expr ((0x$result & 0x80) eq 0x80)]
			# echo [format "System Controller busy check result = %s, busy = %s" $result $busy]
		}
		
		# Scan out DPK_LO (DPK[127:0]) and loop until accepted
		irscan $fpga_tap 0xeb
		drscan $fpga_tap 128 $DPK_LO
		set busy 1
		while {$busy} {
			# drscan out 128 x 0 bits and capture result
			set result [drscan $fpga_tap 128 0x00000000000000000000000000000000 -endstate DRPAUSE]
			# result[127] : 0 = done, 1 = busy
			set busy [expr ((0x[string range $result 0 1] & 0x80) eq 0x80)]
			# if busy then scan command again
			if {$busy} {
				irscan $fpga_tap 0xeb -endstate IRPAUSE
			}
			# echo [format "DPK_LO result = %s, busy = %s" $result $busy]			
		}

		# Scan out DPK_HI (DPK[255:128]) and loop until accepted
		irscan $fpga_tap 0xec
		drscan $fpga_tap 128 $DPK_HI
		runtest 1
		set busy 1
		while {$busy} {
			# drscan out 128 x 0 bits and capture result
			set result [drscan $fpga_tap 128 0x00000000000000000000000000000000 -endstate DRPAUSE]
			# result[127] : 0 = done, 1 = busy
			set busy [expr ((0x[string range $result 0 1] & 0x80) eq 0x80)]
			# if busy then scan command again
			if {$busy} {
				irscan $fpga_tap 0xeb -endstate IRPAUSE
			}
			# echo [format "DPK_HI result = %s, busy = %s" $result $busy]			
		}
	
		# Perform DPK check/unlock - repeat/loop until complete
		irscan $fpga_tap 0xad
		drscan $fpga_tap 8 0x00
		set busy 1
		while {$busy} {
			# drscan out 8 x 0 bits and capture result
			set result [drscan $fpga_tap 8 0x00 -endstate DRPAUSE]
			# result[7] : 0 = done, 1 = busy
			set busy [expr ([expr (0x$result & 0x80)] eq 0x80)]
			# echo [format "DPK unlock result = %s, busy = %s" $result $busy]
			if {$busy} {
				irscan $fpga_tap 0xad -endstate IRPAUSE
			}
		}
		
		# result[1:0] : 1X = error, 01 = unlocked, 00 = locked
		set result [expr (($result) & 0x3)]	
		if {$result ne 1} {
			error [format "Info : failed to unlock Cortex-M3 debug access using Debug Pass Key (DPK) 0x%s" $DPK]
		} else {
			echo [format "Info : successfully unlocked Cortex-M3 debug access using Debug Pass Key (DPK) 0x%s" $DPK]
		}
		
		# echo "End unlock_debug_access"
	}

	# Disable FPGA TAP
	proc disable_fpga_tap {fpga_tap bypass_cmd} {
		# Unlock Cortex-M3 debug access if necessary (SmartFusion2 only)
		unlock_debug_access $fpga_tap
	
		# Send "bypass" command to FPGA TAP to switch it off
		irscan $fpga_tap $bypass_cmd -endstate IRPAUSE
		drscan $fpga_tap 8 0x00 -endstate DRPAUSE
		runtest 8
	}

	# Enable Cortex-M3 DAP
	proc enable_m3_dap {} {
		# Nothing to do here - the work is done in disable_fpga_tap
		# but the handler still needs to be defined
	}	
} else {
	# ... FPGA TAP is bypassed in hardware so Cortex-M3 DAP TAP is available directly

	#
	# Cortex-M3 DAP
	#

	jtag newtap $DEVICE dap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version
}

#
# Target CPU
#

set _TARGETNAME $DEVICE.cpu
target create $_TARGETNAME cortex_m -chain-position $DEVICE.dap

#
# ESRAM
#

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $device_esram_size($DEVICE) -work-area-backup 0

#
# ENVM
#

flash bank $DEVICE.envm $envm_driver($device_family($DEVICE)) 0x60000000 $device_envm_size($DEVICE) 0 0 $_TARGETNAME

#
# Reset configuration
#

# SRSTn not implemented so use SYSRESETREQ to perform a soft reset
cortex_m reset_config sysresetreq

# Only TRSTn supported
reset_config trst_only

#
# Reset initialization
#

# SmartFusion2 reset-init
proc do_smartfusion2_reset_init {} {
	# lr/r14 is 0xffffffff on reset (see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/CHDBIBGJ.html)
	# This can cause gdb to generate errors of the following form early on:
	# "Error: address + size wrapped(0xffffffff, 0x00000004)"
	# To avoid these we zeroize lr here
	reg lr 0
	
	# Ensure that xPSR/EPSR T (Thumb) bit (bit 24) is set otherwise execution
	# will result in hard fault. T bit is loaded from bit 0 of the reset 
	# vector. This could be 0 if, for example, eNVM is zeroized.
	reg xPSR 0x01000000

	# Disable watchdog - write 0 to WDOG_CR register
	mww 0x4003806C 0x00000000
	
	# Disable cache - write 0 to CC_CR register
	mww 0x40038018 0x00000000
}

# SmartFusion reset-init
proc do_smartfusion_reset_init {} {
	# Disable watchdog - write 0x4c6e55fa to WDOGENABLE register
	mww 0x40006010 0x4c6e55fa

	# SmartFusion system boot code in eNVM must be run to ensure that the 
	# target is properly and fully initialized before doing anything with it
 
	# Minimal program in eSRAM that just executes a BKPT	
	array set a {
		0	0x20004000
		1	0x20000009
		2	0xbe00be00
	}
	array2mem a 32 0x20000000 [array size a]

	# System boot expects VTOR to point to user program's vector table base address
	mww 0xe000ed08 0x20000000

	# Initialize sp/pc from system boot code vector table
	mem2array a 32 0x60080000 2
	reg sp $a(0)
	reg pc $a(1)

	# Resume execution - runs system boot code which then runs BKPT program
	resume

	# Wait (for up to a second) for target to halt due to BKPT
	wait_halt 1000
}

# Perform SmartFusion or SmartFusion2 device family reset-init
proc do_device_reset_init {} {
	global DEVICE
	global device_family
	
	if {$device_family($DEVICE) eq "SmartFusion"} {
		do_smartfusion_reset_init
	} else {
		do_smartfusion2_reset_init
	}	
}

# reset-init event handler
$_TARGETNAME configure -event reset-init {
	# device reset-init
	do_device_reset_init

	# call board level reset-init if defined
	if {[exists -proc do_board_reset_init]} {
		do_board_reset_init
	}
}

# examine-end event handler
$_TARGETNAME configure -event examine-end {
	# Check that we are, in fact, talking to a Cortex-M3
	# http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100165_0201_00_en/ric1417175933150.html
	
	mem2array a 32 0xe000ed00 1
	set cpuid [expr (($a(0) >> 4) & 0x00000fff)]
	if {$cpuid ne 0x00000c23} {
		error [format "Error: failed to detect Cortex-M3, CPUID = 0x%04x" $a(0)]
	}
}

# gdb-detach event handler
$_TARGETNAME configure -event gdb-detach {
	# resume execution on debugger detach
	resume
}

# TODO: why does this eliminate the second (redundant?) probe/examine?
proc init_reset {mode} {
}
